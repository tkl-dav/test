name: Java CI/CD for Java Project
<<<<<<< HEAD
 
 on:
   push:
     branches:
       - main  # Le workflow se déclenche lors d'un push sur la branche 'main'
   pull_request:
     branches:
       - main  # Ou lors d'une pull request vers la branche 'main'
 
 jobs:
   build:
     runs-on: ubuntu-latest  # Utilise la dernière version stable d'Ubuntu
 
     steps:
     - name: Checkout code
       uses: actions/checkout@v3  # Vérifie le code source du dépôt
 
     - name: Set up Zulu JDK 17
       uses: actions/setup-java@v3  # Utilise l'action setup-java pour installer JDK
       with:
         java-version: '17'  # Spécifie que vous voulez utiliser JDK 23.0.2
         distribution: 'temurin'  # Utilisation de la distribution Zulu OpenJDK
 
     - name: Install SQLite JDBC Driver
       run: |
         wget https://github.com/xerial/sqlite-jdbc/releases/download/3.42.0.0/sqlite-jdbc-3.49.0.0.jar  # Télécharge le driver JDBC pour SQLite
 
     - name: Install JUnit 5
       run: |
         wget https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.8.2/junit-platform-console-standalone-1.8.2.jar -O junit-platform-console-standalone.jar  # Télécharge JUnit 5
 
     - name: Compile Java files
       run: |
         mkdir -p bin  # Crée le répertoire bin pour les fichiers compilés
         javac -d bin -cp ".:sqlite-jdbc-3.49.0.0.jar:junit-platform-console-standalone.jar" src/authentification/*.java  # Compile les fichiers .java avec le driver SQLite et JUnit 5
 
     - name: Run tests
       run: |
         java -cp ".:bin:sqlite-jdbc-3.49.0.0.jar:junit-platform-console-standalone.jar" org.junit.platform.console.ConsoleLauncher --scan-classpath  # Exécute vos tests avec JUnit 5 et le driver JDBC SQLite
 
   deploy:
     needs: build  # Assure que l'étape de déploiement se fait uniquement après que le build soit terminé avec succès
     runs-on: ubuntu-latest  # Utilise également la dernière version stable d'Ubuntu
 
     steps:
     - name: Checkout code
       uses: actions/checkout@v3  # Vérifie à nouveau le code
 
     - name: Set up tamarin JDK 17
       uses: actions/setup-java@v3  # Installe JDK 23
       with:
         java-version: '17'  # Spécifie la version de JDK
         distribution: 'temurin'  # Utilisation de la distribution Zulu OpenJDK
 
     - name: Build and package the application
       run: |
         mkdir -p bin
         javac -d bin -cp ".:sqlite-jdbc-3.49.0.0.jar:junit-platform-console-standalone.jar" src/authentification/*.java  # Compile les fichiers source Java
 
     - name: Create JAR package
       run: |
         jar -cvf my-app.jar -C bin/ .  # Crée un fichier JAR contenant les fichiers compilés
     - name: Deploy to Server or Cloud
       run: |
         scp my-app.jar username@your-server:/path/to/deployment/folder  # Déploie l'application sur un serveur via SCP (ajustez selon votre serveur et destination)
         # OU
         # Si vous déployez sur un service comme AWS, Azure, ou Google Cloud, vous pouvez utiliser leurs CLI pour déployer
         # aws s3 cp my-app.jar s3://your-bucket-name/
=======

on:
  push:
    branches:
      - main  # Le workflow se déclenche lors d'un push sur la branche 'main'
  pull_request:
    branches:
      - main  # Ou lors d'une pull request vers la branche 'main'

jobs:
  build:
    runs-on: ubuntu-latest  # Utilise la dernière version stable d'Ubuntu

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Vérifie le code source du dépôt

    - name: Set up temurin JDK 17
      uses: actions/setup-java@v3  # Utilise l'action setup-java pour installer JDK
      with:
        java-version: '17'  # Spécifie que vous voulez utiliser JDK 17.0.2
        distribution: 'temurin'  # Utilisation de la distribution Zulu OpenJDK

    - name: Install SQLite JDBC Driver
      run: |
        wget https://github.com/xerial/sqlite-jdbc/releases/download/3.49.0.0/sqlite-jdbc-3.49.0.0.jar  # Télécharge le driver JDBC pour SQLite
    - name: Install jBCrypt 
      run: |
        wget https://repo1.maven.org/maven2/org/mindrot/jbcrypt/0.4/jbcrypt-0.4.jar  # Télécharge la bibliothèque jBCrypt
    - name: Install JUnit 5
      run: |
        wget https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.8.2/junit-platform-console-standalone-1.8.2.jar -O junit-platform-console-standalone.jar  # Télécharge JUnit 5

    - name: Compile Java files
      run: |
        mkdir -p bin  # Crée le répertoire bin pour les fichiers compilés
        javac -d bin -cp ".:sqlite-jdbc-3.49.0.0.jar:junit-platform-console-standalone.jar:jBCrypt-0.4.jar" src/main/*.java  # Compile les fichiers .java avec le driver SQLite et JUnit 5
    
    - name: Run tests
      run: |
        java -cp ".:bin:sqlite-jdbc-3.49.0.0.jar:junit-platform-console-standalone.jar:jBCrypt-0.4.jar" org.junit.platform.console.ConsoleLauncher --scan-classpath  # Exécute vos tests avec JUnit 5 et le driver JDBC SQLite

  deploy:
    needs: build  # Assure que l'étape de déploiement se fait uniquement après que le build soit terminé avec succès
    runs-on: ubuntu-latest  # Utilise également la dernière version stable d'Ubuntu

    steps:
    - name: Checkout code
      uses: actions/checkout@v3  # Vérifie à nouveau le code

    - name: Set up tamarin JDK 17
      uses: actions/setup-java@v3  # Installe JDK 23
      with:
        java-version: '17'  # Spécifie la version de JDK
        distribution: 'temurin'  # Utilisation de la distribution Zulu OpenJDK

    - name: Build and package the application
      run: |
        mkdir -p bin
        javac -d bin -cp ".:sqlite-jdbc-3.49.0.0.jar:junit-platform-console-standalone.jar:jBCrypt-0.4.jar" src/main/*.java  # Compile les fichiers source Java

    - name: Create JAR package
      run: |
        jar -cvf my-app.jar -C bin/ .  # Crée un fichier JAR contenant les fichiers compilés
    - name: Deploy to Server or Cloud
      run: |
        scp my-app.jar username@your-server:/path/to/deployment/folder  # Déploie l'application sur un serveur via SCP (ajustez selon votre serveur et destination)
        # OU
        # Si vous déployez sur un service comme AWS, Azure, ou Google Cloud, vous pouvez utiliser leurs CLI pour déployer
        # aws s3 cp my-app.jar s3://your-bucket-name/
>>>>>>> ae8edc49eae5b0e72e70f6065ed0818d20b2d0f3
